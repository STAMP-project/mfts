/**
 * generated by Xtext 2.12.0
 */
package eu.stamp.mfts.mFTS.impl;

import eu.stamp.mfts.mFTS.Expect;
import eu.stamp.mfts.mFTS.Expression;
import eu.stamp.mfts.mFTS.MFTSPackage;
import eu.stamp.mfts.mFTS.Message;
import eu.stamp.mfts.mFTS.PlatformAnnotation;
import eu.stamp.mfts.mFTS.Service;
import eu.stamp.mfts.mFTS.TimeInterval;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Expect</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link eu.stamp.mfts.mFTS.impl.ExpectImpl#getService <em>Service</em>}</li>
 *   <li>{@link eu.stamp.mfts.mFTS.impl.ExpectImpl#getMessage <em>Message</em>}</li>
 *   <li>{@link eu.stamp.mfts.mFTS.impl.ExpectImpl#getTime <em>Time</em>}</li>
 *   <li>{@link eu.stamp.mfts.mFTS.impl.ExpectImpl#getAnnotations <em>Annotations</em>}</li>
 *   <li>{@link eu.stamp.mfts.mFTS.impl.ExpectImpl#getAsserts <em>Asserts</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ExpectImpl extends ActionImpl implements Expect
{
  /**
   * The cached value of the '{@link #getService() <em>Service</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getService()
   * @generated
   * @ordered
   */
  protected Service service;

  /**
   * The cached value of the '{@link #getMessage() <em>Message</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMessage()
   * @generated
   * @ordered
   */
  protected Message message;

  /**
   * The cached value of the '{@link #getTime() <em>Time</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTime()
   * @generated
   * @ordered
   */
  protected TimeInterval time;

  /**
   * The cached value of the '{@link #getAnnotations() <em>Annotations</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAnnotations()
   * @generated
   * @ordered
   */
  protected EList<PlatformAnnotation> annotations;

  /**
   * The cached value of the '{@link #getAsserts() <em>Asserts</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAsserts()
   * @generated
   * @ordered
   */
  protected EList<Expression> asserts;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ExpectImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MFTSPackage.Literals.EXPECT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Service getService()
  {
    if (service != null && service.eIsProxy())
    {
      InternalEObject oldService = (InternalEObject)service;
      service = (Service)eResolveProxy(oldService);
      if (service != oldService)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, MFTSPackage.EXPECT__SERVICE, oldService, service));
      }
    }
    return service;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Service basicGetService()
  {
    return service;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setService(Service newService)
  {
    Service oldService = service;
    service = newService;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MFTSPackage.EXPECT__SERVICE, oldService, service));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Message getMessage()
  {
    if (message != null && message.eIsProxy())
    {
      InternalEObject oldMessage = (InternalEObject)message;
      message = (Message)eResolveProxy(oldMessage);
      if (message != oldMessage)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, MFTSPackage.EXPECT__MESSAGE, oldMessage, message));
      }
    }
    return message;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Message basicGetMessage()
  {
    return message;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setMessage(Message newMessage)
  {
    Message oldMessage = message;
    message = newMessage;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MFTSPackage.EXPECT__MESSAGE, oldMessage, message));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TimeInterval getTime()
  {
    return time;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTime(TimeInterval newTime, NotificationChain msgs)
  {
    TimeInterval oldTime = time;
    time = newTime;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MFTSPackage.EXPECT__TIME, oldTime, newTime);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTime(TimeInterval newTime)
  {
    if (newTime != time)
    {
      NotificationChain msgs = null;
      if (time != null)
        msgs = ((InternalEObject)time).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MFTSPackage.EXPECT__TIME, null, msgs);
      if (newTime != null)
        msgs = ((InternalEObject)newTime).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MFTSPackage.EXPECT__TIME, null, msgs);
      msgs = basicSetTime(newTime, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MFTSPackage.EXPECT__TIME, newTime, newTime));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<PlatformAnnotation> getAnnotations()
  {
    if (annotations == null)
    {
      annotations = new EObjectContainmentEList<PlatformAnnotation>(PlatformAnnotation.class, this, MFTSPackage.EXPECT__ANNOTATIONS);
    }
    return annotations;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Expression> getAsserts()
  {
    if (asserts == null)
    {
      asserts = new EObjectContainmentEList<Expression>(Expression.class, this, MFTSPackage.EXPECT__ASSERTS);
    }
    return asserts;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MFTSPackage.EXPECT__TIME:
        return basicSetTime(null, msgs);
      case MFTSPackage.EXPECT__ANNOTATIONS:
        return ((InternalEList<?>)getAnnotations()).basicRemove(otherEnd, msgs);
      case MFTSPackage.EXPECT__ASSERTS:
        return ((InternalEList<?>)getAsserts()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MFTSPackage.EXPECT__SERVICE:
        if (resolve) return getService();
        return basicGetService();
      case MFTSPackage.EXPECT__MESSAGE:
        if (resolve) return getMessage();
        return basicGetMessage();
      case MFTSPackage.EXPECT__TIME:
        return getTime();
      case MFTSPackage.EXPECT__ANNOTATIONS:
        return getAnnotations();
      case MFTSPackage.EXPECT__ASSERTS:
        return getAsserts();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MFTSPackage.EXPECT__SERVICE:
        setService((Service)newValue);
        return;
      case MFTSPackage.EXPECT__MESSAGE:
        setMessage((Message)newValue);
        return;
      case MFTSPackage.EXPECT__TIME:
        setTime((TimeInterval)newValue);
        return;
      case MFTSPackage.EXPECT__ANNOTATIONS:
        getAnnotations().clear();
        getAnnotations().addAll((Collection<? extends PlatformAnnotation>)newValue);
        return;
      case MFTSPackage.EXPECT__ASSERTS:
        getAsserts().clear();
        getAsserts().addAll((Collection<? extends Expression>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MFTSPackage.EXPECT__SERVICE:
        setService((Service)null);
        return;
      case MFTSPackage.EXPECT__MESSAGE:
        setMessage((Message)null);
        return;
      case MFTSPackage.EXPECT__TIME:
        setTime((TimeInterval)null);
        return;
      case MFTSPackage.EXPECT__ANNOTATIONS:
        getAnnotations().clear();
        return;
      case MFTSPackage.EXPECT__ASSERTS:
        getAsserts().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MFTSPackage.EXPECT__SERVICE:
        return service != null;
      case MFTSPackage.EXPECT__MESSAGE:
        return message != null;
      case MFTSPackage.EXPECT__TIME:
        return time != null;
      case MFTSPackage.EXPECT__ANNOTATIONS:
        return annotations != null && !annotations.isEmpty();
      case MFTSPackage.EXPECT__ASSERTS:
        return asserts != null && !asserts.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //ExpectImpl
