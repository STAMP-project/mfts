/*
 * generated by Xtext 2.12.0
 */
package eu.stamp.mfts.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MFTSGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.stamp.mfts.MFTS.Model");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cInterfacesAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cInterfacesServiceInterfaceParserRuleCall_0_0 = (RuleCall)cInterfacesAssignment_0.eContents().get(0);
		private final Assignment cServicesAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cServicesServiceParserRuleCall_1_0 = (RuleCall)cServicesAssignment_1.eContents().get(0);
		private final Assignment cMessagesAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cMessagesMessageParserRuleCall_2_0 = (RuleCall)cMessagesAssignment_2.eContents().get(0);
		private final Assignment cTestsAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cTestsTestSequenceParserRuleCall_3_0 = (RuleCall)cTestsAssignment_3.eContents().get(0);
		
		//Model:
		//	(interfaces+=ServiceInterface | services+=Service | messages+=Message | tests+=TestSequence)*;
		@Override public ParserRule getRule() { return rule; }
		
		//(interfaces+=ServiceInterface | services+=Service | messages+=Message | tests+=TestSequence)*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//interfaces+=ServiceInterface
		public Assignment getInterfacesAssignment_0() { return cInterfacesAssignment_0; }
		
		//ServiceInterface
		public RuleCall getInterfacesServiceInterfaceParserRuleCall_0_0() { return cInterfacesServiceInterfaceParserRuleCall_0_0; }
		
		//services+=Service
		public Assignment getServicesAssignment_1() { return cServicesAssignment_1; }
		
		//Service
		public RuleCall getServicesServiceParserRuleCall_1_0() { return cServicesServiceParserRuleCall_1_0; }
		
		//messages+=Message
		public Assignment getMessagesAssignment_2() { return cMessagesAssignment_2; }
		
		//Message
		public RuleCall getMessagesMessageParserRuleCall_2_0() { return cMessagesMessageParserRuleCall_2_0; }
		
		//tests+=TestSequence
		public Assignment getTestsAssignment_3() { return cTestsAssignment_3; }
		
		//TestSequence
		public RuleCall getTestsTestSequenceParserRuleCall_3_0() { return cTestsTestSequenceParserRuleCall_3_0; }
	}
	public class PlatformAnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.stamp.mfts.MFTS.PlatformAnnotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameANNOTATION_IDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0_0 = (RuleCall)cValueAssignment_1_0.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cValueEXTERNTerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		
		//// ANNOTATION
		//PlatformAnnotation:
		//	name=ANNOTATION_ID (value=STRING | value=EXTERN);
		@Override public ParserRule getRule() { return rule; }
		
		//name=ANNOTATION_ID (value=STRING | value=EXTERN)
		public Group getGroup() { return cGroup; }
		
		//name=ANNOTATION_ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ANNOTATION_ID
		public RuleCall getNameANNOTATION_IDTerminalRuleCall_0_0() { return cNameANNOTATION_IDTerminalRuleCall_0_0; }
		
		//value=STRING | value=EXTERN
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//value=STRING
		public Assignment getValueAssignment_1_0() { return cValueAssignment_1_0; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0_0() { return cValueSTRINGTerminalRuleCall_1_0_0; }
		
		//value=EXTERN
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//EXTERN
		public RuleCall getValueEXTERNTerminalRuleCall_1_1_0() { return cValueEXTERNTerminalRuleCall_1_1_0; }
	}
	public class ServiceInterfaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.stamp.mfts.MFTS.ServiceInterface");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInterfaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cAnnotationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAnnotationsPlatformAnnotationParserRuleCall_2_0 = (RuleCall)cAnnotationsAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cAlternatives_4.eContents().get(0);
		private final Keyword cSendsKeyword_4_0_0 = (Keyword)cGroup_4_0.eContents().get(0);
		private final Assignment cSendsAssignment_4_0_1 = (Assignment)cGroup_4_0.eContents().get(1);
		private final CrossReference cSendsMessageCrossReference_4_0_1_0 = (CrossReference)cSendsAssignment_4_0_1.eContents().get(0);
		private final RuleCall cSendsMessageIDTerminalRuleCall_4_0_1_0_1 = (RuleCall)cSendsMessageCrossReference_4_0_1_0.eContents().get(1);
		private final Group cGroup_4_0_2 = (Group)cGroup_4_0.eContents().get(2);
		private final Keyword cCommaKeyword_4_0_2_0 = (Keyword)cGroup_4_0_2.eContents().get(0);
		private final Assignment cSendsAssignment_4_0_2_1 = (Assignment)cGroup_4_0_2.eContents().get(1);
		private final CrossReference cSendsMessageCrossReference_4_0_2_1_0 = (CrossReference)cSendsAssignment_4_0_2_1.eContents().get(0);
		private final RuleCall cSendsMessageIDTerminalRuleCall_4_0_2_1_0_1 = (RuleCall)cSendsMessageCrossReference_4_0_2_1_0.eContents().get(1);
		private final Group cGroup_4_1 = (Group)cAlternatives_4.eContents().get(1);
		private final Keyword cReceivesKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cReceivesAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final CrossReference cReceivesMessageCrossReference_4_1_1_0 = (CrossReference)cReceivesAssignment_4_1_1.eContents().get(0);
		private final RuleCall cReceivesMessageIDTerminalRuleCall_4_1_1_0_1 = (RuleCall)cReceivesMessageCrossReference_4_1_1_0.eContents().get(1);
		private final Group cGroup_4_1_2 = (Group)cGroup_4_1.eContents().get(2);
		private final Keyword cCommaKeyword_4_1_2_0 = (Keyword)cGroup_4_1_2.eContents().get(0);
		private final Assignment cReceivesAssignment_4_1_2_1 = (Assignment)cGroup_4_1_2.eContents().get(1);
		private final CrossReference cReceivesMessageCrossReference_4_1_2_1_0 = (CrossReference)cReceivesAssignment_4_1_2_1.eContents().get(0);
		private final RuleCall cReceivesMessageIDTerminalRuleCall_4_1_2_1_0_1 = (RuleCall)cReceivesMessageCrossReference_4_1_2_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//// SERVICES INTERFACE
		//ServiceInterface:
		//	'interface' name=ID annotations+=PlatformAnnotation* '{' ('sends' sends+=[Message] ("," sends+=[Message])* |
		//	'receives' receives+=[Message] ("," receives+=[Message])*)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'interface' name=ID annotations+=PlatformAnnotation* '{' ('sends' sends+=[Message] ("," sends+=[Message])* | 'receives'
		//receives+=[Message] ("," receives+=[Message])*)* '}'
		public Group getGroup() { return cGroup; }
		
		//'interface'
		public Keyword getInterfaceKeyword_0() { return cInterfaceKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//annotations+=PlatformAnnotation*
		public Assignment getAnnotationsAssignment_2() { return cAnnotationsAssignment_2; }
		
		//PlatformAnnotation
		public RuleCall getAnnotationsPlatformAnnotationParserRuleCall_2_0() { return cAnnotationsPlatformAnnotationParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//('sends' sends+=[Message] ("," sends+=[Message])* | 'receives' receives+=[Message] ("," receives+=[Message])*)*
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//'sends' sends+=[Message] ("," sends+=[Message])*
		public Group getGroup_4_0() { return cGroup_4_0; }
		
		//'sends'
		public Keyword getSendsKeyword_4_0_0() { return cSendsKeyword_4_0_0; }
		
		//sends+=[Message]
		public Assignment getSendsAssignment_4_0_1() { return cSendsAssignment_4_0_1; }
		
		//[Message]
		public CrossReference getSendsMessageCrossReference_4_0_1_0() { return cSendsMessageCrossReference_4_0_1_0; }
		
		//ID
		public RuleCall getSendsMessageIDTerminalRuleCall_4_0_1_0_1() { return cSendsMessageIDTerminalRuleCall_4_0_1_0_1; }
		
		//("," sends+=[Message])*
		public Group getGroup_4_0_2() { return cGroup_4_0_2; }
		
		//","
		public Keyword getCommaKeyword_4_0_2_0() { return cCommaKeyword_4_0_2_0; }
		
		//sends+=[Message]
		public Assignment getSendsAssignment_4_0_2_1() { return cSendsAssignment_4_0_2_1; }
		
		//[Message]
		public CrossReference getSendsMessageCrossReference_4_0_2_1_0() { return cSendsMessageCrossReference_4_0_2_1_0; }
		
		//ID
		public RuleCall getSendsMessageIDTerminalRuleCall_4_0_2_1_0_1() { return cSendsMessageIDTerminalRuleCall_4_0_2_1_0_1; }
		
		//'receives' receives+=[Message] ("," receives+=[Message])*
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//'receives'
		public Keyword getReceivesKeyword_4_1_0() { return cReceivesKeyword_4_1_0; }
		
		//receives+=[Message]
		public Assignment getReceivesAssignment_4_1_1() { return cReceivesAssignment_4_1_1; }
		
		//[Message]
		public CrossReference getReceivesMessageCrossReference_4_1_1_0() { return cReceivesMessageCrossReference_4_1_1_0; }
		
		//ID
		public RuleCall getReceivesMessageIDTerminalRuleCall_4_1_1_0_1() { return cReceivesMessageIDTerminalRuleCall_4_1_1_0_1; }
		
		//("," receives+=[Message])*
		public Group getGroup_4_1_2() { return cGroup_4_1_2; }
		
		//","
		public Keyword getCommaKeyword_4_1_2_0() { return cCommaKeyword_4_1_2_0; }
		
		//receives+=[Message]
		public Assignment getReceivesAssignment_4_1_2_1() { return cReceivesAssignment_4_1_2_1; }
		
		//[Message]
		public CrossReference getReceivesMessageCrossReference_4_1_2_1_0() { return cReceivesMessageCrossReference_4_1_2_1_0; }
		
		//ID
		public RuleCall getReceivesMessageIDTerminalRuleCall_4_1_2_1_0_1() { return cReceivesMessageIDTerminalRuleCall_4_1_2_1_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class MessageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.stamp.mfts.MFTS.Message");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMessageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParametersAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParametersParameterParserRuleCall_3_0_0 = (RuleCall)cParametersAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParametersAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_3_1_1_0 = (RuleCall)cParametersAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cAnnotationsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAnnotationsPlatformAnnotationParserRuleCall_5_0 = (RuleCall)cAnnotationsAssignment_5.eContents().get(0);
		
		//Message:
		//	'message' name=ID '(' (parameters+=Parameter ("," parameters+=Parameter)*)? ')'
		//	annotations+=PlatformAnnotation*;
		@Override public ParserRule getRule() { return rule; }
		
		//'message' name=ID '(' (parameters+=Parameter ("," parameters+=Parameter)*)? ')' annotations+=PlatformAnnotation*
		public Group getGroup() { return cGroup; }
		
		//'message'
		public Keyword getMessageKeyword_0() { return cMessageKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(parameters+=Parameter ("," parameters+=Parameter)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_3_0() { return cParametersAssignment_3_0; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_3_0_0() { return cParametersParameterParserRuleCall_3_0_0; }
		
		//("," parameters+=Parameter)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_3_1_1() { return cParametersAssignment_3_1_1; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_3_1_1_0() { return cParametersParameterParserRuleCall_3_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//annotations+=PlatformAnnotation*
		public Assignment getAnnotationsAssignment_5() { return cAnnotationsAssignment_5; }
		
		//PlatformAnnotation
		public RuleCall getAnnotationsPlatformAnnotationParserRuleCall_5_0() { return cAnnotationsPlatformAnnotationParserRuleCall_5_0; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.stamp.mfts.MFTS.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsPlatformAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		
		//Parameter:
		//	name=ID annotations+=PlatformAnnotation*;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID annotations+=PlatformAnnotation*
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//annotations+=PlatformAnnotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }
		
		//PlatformAnnotation
		public RuleCall getAnnotationsPlatformAnnotationParserRuleCall_1_0() { return cAnnotationsPlatformAnnotationParserRuleCall_1_0; }
	}
	public class ServiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.stamp.mfts.MFTS.Service");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cServiceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInterfacesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cInterfacesServiceInterfaceCrossReference_3_0 = (CrossReference)cInterfacesAssignment_3.eContents().get(0);
		private final RuleCall cInterfacesServiceInterfaceIDTerminalRuleCall_3_0_1 = (RuleCall)cInterfacesServiceInterfaceCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cInterfacesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cInterfacesServiceInterfaceCrossReference_4_1_0 = (CrossReference)cInterfacesAssignment_4_1.eContents().get(0);
		private final RuleCall cInterfacesServiceInterfaceIDTerminalRuleCall_4_1_0_1 = (RuleCall)cInterfacesServiceInterfaceCrossReference_4_1_0.eContents().get(1);
		private final Assignment cAnnotationsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAnnotationsPlatformAnnotationParserRuleCall_5_0 = (RuleCall)cAnnotationsAssignment_5.eContents().get(0);
		
		//// SERVICE INSTANCE
		//Service:
		//	'service' name=ID ':' interfaces+=[ServiceInterface] (',' interfaces+=[ServiceInterface])*
		//	annotations+=PlatformAnnotation*;
		@Override public ParserRule getRule() { return rule; }
		
		//'service' name=ID ':' interfaces+=[ServiceInterface] (',' interfaces+=[ServiceInterface])*
		//annotations+=PlatformAnnotation*
		public Group getGroup() { return cGroup; }
		
		//'service'
		public Keyword getServiceKeyword_0() { return cServiceKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//interfaces+=[ServiceInterface]
		public Assignment getInterfacesAssignment_3() { return cInterfacesAssignment_3; }
		
		//[ServiceInterface]
		public CrossReference getInterfacesServiceInterfaceCrossReference_3_0() { return cInterfacesServiceInterfaceCrossReference_3_0; }
		
		//ID
		public RuleCall getInterfacesServiceInterfaceIDTerminalRuleCall_3_0_1() { return cInterfacesServiceInterfaceIDTerminalRuleCall_3_0_1; }
		
		//(',' interfaces+=[ServiceInterface])*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//interfaces+=[ServiceInterface]
		public Assignment getInterfacesAssignment_4_1() { return cInterfacesAssignment_4_1; }
		
		//[ServiceInterface]
		public CrossReference getInterfacesServiceInterfaceCrossReference_4_1_0() { return cInterfacesServiceInterfaceCrossReference_4_1_0; }
		
		//ID
		public RuleCall getInterfacesServiceInterfaceIDTerminalRuleCall_4_1_0_1() { return cInterfacesServiceInterfaceIDTerminalRuleCall_4_1_0_1; }
		
		//annotations+=PlatformAnnotation*
		public Assignment getAnnotationsAssignment_5() { return cAnnotationsAssignment_5; }
		
		//PlatformAnnotation
		public RuleCall getAnnotationsPlatformAnnotationParserRuleCall_5_0() { return cAnnotationsPlatformAnnotationParserRuleCall_5_0; }
	}
	public class TestSequenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.stamp.mfts.MFTS.TestSequence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTestKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cAnnotationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAnnotationsPlatformAnnotationParserRuleCall_2_0 = (RuleCall)cAnnotationsAssignment_2.eContents().get(0);
		private final Assignment cActionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cActionsSeqParserRuleCall_3_0 = (RuleCall)cActionsAssignment_3.eContents().get(0);
		
		//// TEST SEQUENCE
		//TestSequence:
		//	'test' name=ID annotations+=PlatformAnnotation* actions=Seq;
		@Override public ParserRule getRule() { return rule; }
		
		//'test' name=ID annotations+=PlatformAnnotation* actions=Seq
		public Group getGroup() { return cGroup; }
		
		//'test'
		public Keyword getTestKeyword_0() { return cTestKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//annotations+=PlatformAnnotation*
		public Assignment getAnnotationsAssignment_2() { return cAnnotationsAssignment_2; }
		
		//PlatformAnnotation
		public RuleCall getAnnotationsPlatformAnnotationParserRuleCall_2_0() { return cAnnotationsPlatformAnnotationParserRuleCall_2_0; }
		
		//actions=Seq
		public Assignment getActionsAssignment_3() { return cActionsAssignment_3; }
		
		//Seq
		public RuleCall getActionsSeqParserRuleCall_3_0() { return cActionsSeqParserRuleCall_3_0; }
	}
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.stamp.mfts.MFTS.Action");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cWaitParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSendParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cExpectParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cParParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSeqParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//// ACTIONS
		//Action:
		//	Wait | Send | Expect | Par | Seq;
		@Override public ParserRule getRule() { return rule; }
		
		//Wait | Send | Expect | Par | Seq
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Wait
		public RuleCall getWaitParserRuleCall_0() { return cWaitParserRuleCall_0; }
		
		//Send
		public RuleCall getSendParserRuleCall_1() { return cSendParserRuleCall_1; }
		
		//Expect
		public RuleCall getExpectParserRuleCall_2() { return cExpectParserRuleCall_2; }
		
		//Par
		public RuleCall getParParserRuleCall_3() { return cParParserRuleCall_3; }
		
		//Seq
		public RuleCall getSeqParserRuleCall_4() { return cSeqParserRuleCall_4; }
	}
	public class ParElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.stamp.mfts.MFTS.Par");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cParKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cWithinKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTimeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTimeTimeIntervalParserRuleCall_3_0 = (RuleCall)cTimeAssignment_3.eContents().get(0);
		private final Assignment cAnnotationsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAnnotationsPlatformAnnotationParserRuleCall_4_0 = (RuleCall)cAnnotationsAssignment_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cActionsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cActionsActionParserRuleCall_6_0 = (RuleCall)cActionsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Par:
		//	'par' name=ID? 'within' time=TimeInterval annotations+=PlatformAnnotation* '{' actions+=Action* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'par' name=ID? 'within' time=TimeInterval annotations+=PlatformAnnotation* '{' actions+=Action* '}'
		public Group getGroup() { return cGroup; }
		
		//'par'
		public Keyword getParKeyword_0() { return cParKeyword_0; }
		
		//name=ID?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'within'
		public Keyword getWithinKeyword_2() { return cWithinKeyword_2; }
		
		//time=TimeInterval
		public Assignment getTimeAssignment_3() { return cTimeAssignment_3; }
		
		//TimeInterval
		public RuleCall getTimeTimeIntervalParserRuleCall_3_0() { return cTimeTimeIntervalParserRuleCall_3_0; }
		
		//annotations+=PlatformAnnotation*
		public Assignment getAnnotationsAssignment_4() { return cAnnotationsAssignment_4; }
		
		//PlatformAnnotation
		public RuleCall getAnnotationsPlatformAnnotationParserRuleCall_4_0() { return cAnnotationsPlatformAnnotationParserRuleCall_4_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//actions+=Action*
		public Assignment getActionsAssignment_6() { return cActionsAssignment_6; }
		
		//Action
		public RuleCall getActionsActionParserRuleCall_6_0() { return cActionsActionParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class SeqElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.stamp.mfts.MFTS.Seq");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cActionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cActionsActionParserRuleCall_1_0 = (RuleCall)cActionsAssignment_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Seq:
		//	'{' actions+=Action* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' actions+=Action* '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//actions+=Action*
		public Assignment getActionsAssignment_1() { return cActionsAssignment_1; }
		
		//Action
		public RuleCall getActionsActionParserRuleCall_1_0() { return cActionsActionParserRuleCall_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}
	public class WaitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.stamp.mfts.MFTS.Wait");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWaitKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTimeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTimeTimeIntervalParserRuleCall_1_0 = (RuleCall)cTimeAssignment_1.eContents().get(0);
		
		//Wait:
		//	'wait' time=TimeInterval;
		@Override public ParserRule getRule() { return rule; }
		
		//'wait' time=TimeInterval
		public Group getGroup() { return cGroup; }
		
		//'wait'
		public Keyword getWaitKeyword_0() { return cWaitKeyword_0; }
		
		//time=TimeInterval
		public Assignment getTimeAssignment_1() { return cTimeAssignment_1; }
		
		//TimeInterval
		public RuleCall getTimeTimeIntervalParserRuleCall_1_0() { return cTimeTimeIntervalParserRuleCall_1_0; }
	}
	public class SendElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.stamp.mfts.MFTS.Send");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSendKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cServiceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cServiceServiceCrossReference_1_0 = (CrossReference)cServiceAssignment_1.eContents().get(0);
		private final RuleCall cServiceServiceIDTerminalRuleCall_1_0_1 = (RuleCall)cServiceServiceCrossReference_1_0.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMessageAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cMessageMessageCrossReference_3_0 = (CrossReference)cMessageAssignment_3.eContents().get(0);
		private final RuleCall cMessageMessageIDTerminalRuleCall_3_0_1 = (RuleCall)cMessageMessageCrossReference_3_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cParametersAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cParametersExpressionParserRuleCall_5_0_0 = (RuleCall)cParametersAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cParametersAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cParametersExpressionParserRuleCall_5_1_1_0 = (RuleCall)cParametersAssignment_5_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cAnnotationsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cAnnotationsPlatformAnnotationParserRuleCall_7_0 = (RuleCall)cAnnotationsAssignment_7.eContents().get(0);
		
		//Send:
		//	'send' service=[Service] '!' message=[Message] '(' (parameters+=Expression ("," parameters+=Expression)*)? ')'
		//	annotations+=PlatformAnnotation*;
		@Override public ParserRule getRule() { return rule; }
		
		//'send' service=[Service] '!' message=[Message] '(' (parameters+=Expression ("," parameters+=Expression)*)? ')'
		//annotations+=PlatformAnnotation*
		public Group getGroup() { return cGroup; }
		
		//'send'
		public Keyword getSendKeyword_0() { return cSendKeyword_0; }
		
		//service=[Service]
		public Assignment getServiceAssignment_1() { return cServiceAssignment_1; }
		
		//[Service]
		public CrossReference getServiceServiceCrossReference_1_0() { return cServiceServiceCrossReference_1_0; }
		
		//ID
		public RuleCall getServiceServiceIDTerminalRuleCall_1_0_1() { return cServiceServiceIDTerminalRuleCall_1_0_1; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_2() { return cExclamationMarkKeyword_2; }
		
		//message=[Message]
		public Assignment getMessageAssignment_3() { return cMessageAssignment_3; }
		
		//[Message]
		public CrossReference getMessageMessageCrossReference_3_0() { return cMessageMessageCrossReference_3_0; }
		
		//ID
		public RuleCall getMessageMessageIDTerminalRuleCall_3_0_1() { return cMessageMessageIDTerminalRuleCall_3_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }
		
		//(parameters+=Expression ("," parameters+=Expression)*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//parameters+=Expression
		public Assignment getParametersAssignment_5_0() { return cParametersAssignment_5_0; }
		
		//Expression
		public RuleCall getParametersExpressionParserRuleCall_5_0_0() { return cParametersExpressionParserRuleCall_5_0_0; }
		
		//("," parameters+=Expression)*
		public Group getGroup_5_1() { return cGroup_5_1; }
		
		//","
		public Keyword getCommaKeyword_5_1_0() { return cCommaKeyword_5_1_0; }
		
		//parameters+=Expression
		public Assignment getParametersAssignment_5_1_1() { return cParametersAssignment_5_1_1; }
		
		//Expression
		public RuleCall getParametersExpressionParserRuleCall_5_1_1_0() { return cParametersExpressionParserRuleCall_5_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
		
		//annotations+=PlatformAnnotation*
		public Assignment getAnnotationsAssignment_7() { return cAnnotationsAssignment_7; }
		
		//PlatformAnnotation
		public RuleCall getAnnotationsPlatformAnnotationParserRuleCall_7_0() { return cAnnotationsPlatformAnnotationParserRuleCall_7_0; }
	}
	public class ExpectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.stamp.mfts.MFTS.Expect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExpectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cServiceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cServiceServiceCrossReference_1_0 = (CrossReference)cServiceAssignment_1.eContents().get(0);
		private final RuleCall cServiceServiceIDTerminalRuleCall_1_0_1 = (RuleCall)cServiceServiceCrossReference_1_0.eContents().get(1);
		private final Keyword cQuestionMarkKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMessageAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cMessageMessageCrossReference_3_0 = (CrossReference)cMessageAssignment_3.eContents().get(0);
		private final RuleCall cMessageMessageIDTerminalRuleCall_3_0_1 = (RuleCall)cMessageMessageCrossReference_3_0.eContents().get(1);
		private final Keyword cWithinKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTimeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTimeTimeIntervalParserRuleCall_5_0 = (RuleCall)cTimeAssignment_5.eContents().get(0);
		private final Assignment cAnnotationsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cAnnotationsPlatformAnnotationParserRuleCall_6_0 = (RuleCall)cAnnotationsAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cAssertKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cAssertsAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cAssertsExpressionParserRuleCall_7_1_0 = (RuleCall)cAssertsAssignment_7_1.eContents().get(0);
		
		//Expect:
		//	'expect' service=[Service] '?' message=[Message] 'within' time=TimeInterval annotations+=PlatformAnnotation* ('assert'
		//	asserts+=Expression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'expect' service=[Service] '?' message=[Message] 'within' time=TimeInterval annotations+=PlatformAnnotation* ('assert'
		//asserts+=Expression)*
		public Group getGroup() { return cGroup; }
		
		//'expect'
		public Keyword getExpectKeyword_0() { return cExpectKeyword_0; }
		
		//service=[Service]
		public Assignment getServiceAssignment_1() { return cServiceAssignment_1; }
		
		//[Service]
		public CrossReference getServiceServiceCrossReference_1_0() { return cServiceServiceCrossReference_1_0; }
		
		//ID
		public RuleCall getServiceServiceIDTerminalRuleCall_1_0_1() { return cServiceServiceIDTerminalRuleCall_1_0_1; }
		
		//'?'
		public Keyword getQuestionMarkKeyword_2() { return cQuestionMarkKeyword_2; }
		
		//message=[Message]
		public Assignment getMessageAssignment_3() { return cMessageAssignment_3; }
		
		//[Message]
		public CrossReference getMessageMessageCrossReference_3_0() { return cMessageMessageCrossReference_3_0; }
		
		//ID
		public RuleCall getMessageMessageIDTerminalRuleCall_3_0_1() { return cMessageMessageIDTerminalRuleCall_3_0_1; }
		
		//'within'
		public Keyword getWithinKeyword_4() { return cWithinKeyword_4; }
		
		//time=TimeInterval
		public Assignment getTimeAssignment_5() { return cTimeAssignment_5; }
		
		//TimeInterval
		public RuleCall getTimeTimeIntervalParserRuleCall_5_0() { return cTimeTimeIntervalParserRuleCall_5_0; }
		
		//annotations+=PlatformAnnotation*
		public Assignment getAnnotationsAssignment_6() { return cAnnotationsAssignment_6; }
		
		//PlatformAnnotation
		public RuleCall getAnnotationsPlatformAnnotationParserRuleCall_6_0() { return cAnnotationsPlatformAnnotationParserRuleCall_6_0; }
		
		//('assert' asserts+=Expression)*
		public Group getGroup_7() { return cGroup_7; }
		
		//'assert'
		public Keyword getAssertKeyword_7_0() { return cAssertKeyword_7_0; }
		
		//asserts+=Expression
		public Assignment getAssertsAssignment_7_1() { return cAssertsAssignment_7_1; }
		
		//Expression
		public RuleCall getAssertsExpressionParserRuleCall_7_1_0() { return cAssertsExpressionParserRuleCall_7_1_0; }
	}
	public class TimeIntervalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.stamp.mfts.MFTS.TimeInterval");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMinAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMinINTTerminalRuleCall_1_0 = (RuleCall)cMinAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMaxAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMaxINTTerminalRuleCall_3_0 = (RuleCall)cMaxAssignment_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// TIME INTERVALS
		//TimeInterval:
		//	'[' min=INT ':' max=INT ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' min=INT ':' max=INT ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//min=INT
		public Assignment getMinAssignment_1() { return cMinAssignment_1; }
		
		//INT
		public RuleCall getMinINTTerminalRuleCall_1_0() { return cMinINTTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//max=INT
		public Assignment getMaxAssignment_3() { return cMaxAssignment_3; }
		
		//INT
		public RuleCall getMaxINTTerminalRuleCall_3_0() { return cMaxINTTerminalRuleCall_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.stamp.mfts.MFTS.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExternExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cByteLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCharLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cIntegerLiteralParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cBooleanLiteralParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cStringLiteralParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cDoubleLiteralParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//// EXPRESSIONS
		//Expression:
		//	ExternExpression | ByteLiteral | CharLiteral | IntegerLiteral | BooleanLiteral | StringLiteral | DoubleLiteral;
		@Override public ParserRule getRule() { return rule; }
		
		//ExternExpression | ByteLiteral | CharLiteral | IntegerLiteral | BooleanLiteral | StringLiteral | DoubleLiteral
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ExternExpression
		public RuleCall getExternExpressionParserRuleCall_0() { return cExternExpressionParserRuleCall_0; }
		
		//ByteLiteral
		public RuleCall getByteLiteralParserRuleCall_1() { return cByteLiteralParserRuleCall_1; }
		
		//CharLiteral
		public RuleCall getCharLiteralParserRuleCall_2() { return cCharLiteralParserRuleCall_2; }
		
		//IntegerLiteral
		public RuleCall getIntegerLiteralParserRuleCall_3() { return cIntegerLiteralParserRuleCall_3; }
		
		//BooleanLiteral
		public RuleCall getBooleanLiteralParserRuleCall_4() { return cBooleanLiteralParserRuleCall_4; }
		
		//StringLiteral
		public RuleCall getStringLiteralParserRuleCall_5() { return cStringLiteralParserRuleCall_5; }
		
		//DoubleLiteral
		public RuleCall getDoubleLiteralParserRuleCall_6() { return cDoubleLiteralParserRuleCall_6; }
	}
	public class ExternExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.stamp.mfts.MFTS.ExternExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpressionEXTERNTerminalRuleCall_0_0 = (RuleCall)cExpressionAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAmpersandKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSegmentsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSegmentsExpressionParserRuleCall_1_1_0 = (RuleCall)cSegmentsAssignment_1_1.eContents().get(0);
		
		//ExternExpression:
		//	expression=EXTERN ('&' segments+=Expression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//expression=EXTERN ('&' segments+=Expression)*
		public Group getGroup() { return cGroup; }
		
		//expression=EXTERN
		public Assignment getExpressionAssignment_0() { return cExpressionAssignment_0; }
		
		//EXTERN
		public RuleCall getExpressionEXTERNTerminalRuleCall_0_0() { return cExpressionEXTERNTerminalRuleCall_0_0; }
		
		//('&' segments+=Expression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'&'
		public Keyword getAmpersandKeyword_1_0() { return cAmpersandKeyword_1_0; }
		
		//segments+=Expression
		public Assignment getSegmentsAssignment_1_1() { return cSegmentsAssignment_1_1; }
		
		//Expression
		public RuleCall getSegmentsExpressionParserRuleCall_1_1_0() { return cSegmentsExpressionParserRuleCall_1_1_0; }
	}
	public class ByteLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.stamp.mfts.MFTS.ByteLiteral");
		private final Assignment cByteValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cByteValueBYTETerminalRuleCall_0 = (RuleCall)cByteValueAssignment.eContents().get(0);
		
		//ByteLiteral:
		//	byteValue=BYTE;
		@Override public ParserRule getRule() { return rule; }
		
		//byteValue=BYTE
		public Assignment getByteValueAssignment() { return cByteValueAssignment; }
		
		//BYTE
		public RuleCall getByteValueBYTETerminalRuleCall_0() { return cByteValueBYTETerminalRuleCall_0; }
	}
	public class CharLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.stamp.mfts.MFTS.CharLiteral");
		private final Assignment cCharValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cCharValueCHARTerminalRuleCall_0 = (RuleCall)cCharValueAssignment.eContents().get(0);
		
		//CharLiteral:
		//	charValue=CHAR;
		@Override public ParserRule getRule() { return rule; }
		
		//charValue=CHAR
		public Assignment getCharValueAssignment() { return cCharValueAssignment; }
		
		//CHAR
		public RuleCall getCharValueCHARTerminalRuleCall_0() { return cCharValueCHARTerminalRuleCall_0; }
	}
	public class IntegerLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.stamp.mfts.MFTS.IntegerLiteral");
		private final Assignment cIntValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cIntValueINTTerminalRuleCall_0 = (RuleCall)cIntValueAssignment.eContents().get(0);
		
		//IntegerLiteral:
		//	intValue=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//intValue=INT
		public Assignment getIntValueAssignment() { return cIntValueAssignment; }
		
		//INT
		public RuleCall getIntValueINTTerminalRuleCall_0() { return cIntValueINTTerminalRuleCall_0; }
	}
	public class BooleanLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.stamp.mfts.MFTS.BooleanLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cBoolValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cBoolValueTrueKeyword_0_0 = (Keyword)cBoolValueAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cBooleanLiteralAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cFalseKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//BooleanLiteral:
		//	boolValue?='true' | {BooleanLiteral} 'false';
		@Override public ParserRule getRule() { return rule; }
		
		//boolValue?='true' | {BooleanLiteral} 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//boolValue?='true'
		public Assignment getBoolValueAssignment_0() { return cBoolValueAssignment_0; }
		
		//'true'
		public Keyword getBoolValueTrueKeyword_0_0() { return cBoolValueTrueKeyword_0_0; }
		
		//{BooleanLiteral} 'false'
		public Group getGroup_1() { return cGroup_1; }
		
		//{BooleanLiteral}
		public Action getBooleanLiteralAction_1_0() { return cBooleanLiteralAction_1_0; }
		
		//'false'
		public Keyword getFalseKeyword_1_1() { return cFalseKeyword_1_1; }
	}
	public class StringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.stamp.mfts.MFTS.StringLiteral");
		private final Assignment cStringValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStringValueSTRINGTerminalRuleCall_0 = (RuleCall)cStringValueAssignment.eContents().get(0);
		
		//StringLiteral:
		//	stringValue=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//stringValue=STRING
		public Assignment getStringValueAssignment() { return cStringValueAssignment; }
		
		//STRING
		public RuleCall getStringValueSTRINGTerminalRuleCall_0() { return cStringValueSTRINGTerminalRuleCall_0; }
	}
	public class DoubleLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.stamp.mfts.MFTS.DoubleLiteral");
		private final Assignment cDoubleValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cDoubleValueFLOATTerminalRuleCall_0 = (RuleCall)cDoubleValueAssignment.eContents().get(0);
		
		//DoubleLiteral:
		//	doubleValue=FLOAT;
		@Override public ParserRule getRule() { return rule; }
		
		//doubleValue=FLOAT
		public Assignment getDoubleValueAssignment() { return cDoubleValueAssignment; }
		
		//FLOAT
		public RuleCall getDoubleValueFLOATTerminalRuleCall_0() { return cDoubleValueFLOATTerminalRuleCall_0; }
	}
	
	
	private final ModelElements pModel;
	private final PlatformAnnotationElements pPlatformAnnotation;
	private final ServiceInterfaceElements pServiceInterface;
	private final MessageElements pMessage;
	private final ParameterElements pParameter;
	private final ServiceElements pService;
	private final TestSequenceElements pTestSequence;
	private final ActionElements pAction;
	private final ParElements pPar;
	private final SeqElements pSeq;
	private final WaitElements pWait;
	private final SendElements pSend;
	private final ExpectElements pExpect;
	private final TimeIntervalElements pTimeInterval;
	private final ExpressionElements pExpression;
	private final ExternExpressionElements pExternExpression;
	private final ByteLiteralElements pByteLiteral;
	private final CharLiteralElements pCharLiteral;
	private final IntegerLiteralElements pIntegerLiteral;
	private final BooleanLiteralElements pBooleanLiteral;
	private final StringLiteralElements pStringLiteral;
	private final DoubleLiteralElements pDoubleLiteral;
	private final TerminalRule tID;
	private final TerminalRule tBYTE;
	private final TerminalRule tCHAR;
	private final TerminalRule tINT;
	private final TerminalRule tFLOAT;
	private final TerminalRule tANNOTATION_ID;
	private final TerminalRule tSTRING;
	private final TerminalRule tEXTERN;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tWS;
	private final TerminalRule tANY_OTHER;
	
	private final Grammar grammar;

	@Inject
	public MFTSGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pModel = new ModelElements();
		this.pPlatformAnnotation = new PlatformAnnotationElements();
		this.pServiceInterface = new ServiceInterfaceElements();
		this.pMessage = new MessageElements();
		this.pParameter = new ParameterElements();
		this.pService = new ServiceElements();
		this.pTestSequence = new TestSequenceElements();
		this.pAction = new ActionElements();
		this.pPar = new ParElements();
		this.pSeq = new SeqElements();
		this.pWait = new WaitElements();
		this.pSend = new SendElements();
		this.pExpect = new ExpectElements();
		this.pTimeInterval = new TimeIntervalElements();
		this.pExpression = new ExpressionElements();
		this.pExternExpression = new ExternExpressionElements();
		this.pByteLiteral = new ByteLiteralElements();
		this.pCharLiteral = new CharLiteralElements();
		this.pIntegerLiteral = new IntegerLiteralElements();
		this.pBooleanLiteral = new BooleanLiteralElements();
		this.pStringLiteral = new StringLiteralElements();
		this.pDoubleLiteral = new DoubleLiteralElements();
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "eu.stamp.mfts.MFTS.ID");
		this.tBYTE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "eu.stamp.mfts.MFTS.BYTE");
		this.tCHAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "eu.stamp.mfts.MFTS.CHAR");
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "eu.stamp.mfts.MFTS.INT");
		this.tFLOAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "eu.stamp.mfts.MFTS.FLOAT");
		this.tANNOTATION_ID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "eu.stamp.mfts.MFTS.ANNOTATION_ID");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "eu.stamp.mfts.MFTS.STRING");
		this.tEXTERN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "eu.stamp.mfts.MFTS.EXTERN");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "eu.stamp.mfts.MFTS.ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "eu.stamp.mfts.MFTS.SL_COMMENT");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "eu.stamp.mfts.MFTS.WS");
		this.tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "eu.stamp.mfts.MFTS.ANY_OTHER");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("eu.stamp.mfts.MFTS".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Model:
	//	(interfaces+=ServiceInterface | services+=Service | messages+=Message | tests+=TestSequence)*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//// ANNOTATION
	//PlatformAnnotation:
	//	name=ANNOTATION_ID (value=STRING | value=EXTERN);
	public PlatformAnnotationElements getPlatformAnnotationAccess() {
		return pPlatformAnnotation;
	}
	
	public ParserRule getPlatformAnnotationRule() {
		return getPlatformAnnotationAccess().getRule();
	}
	
	//// SERVICES INTERFACE
	//ServiceInterface:
	//	'interface' name=ID annotations+=PlatformAnnotation* '{' ('sends' sends+=[Message] ("," sends+=[Message])* |
	//	'receives' receives+=[Message] ("," receives+=[Message])*)*
	//	'}';
	public ServiceInterfaceElements getServiceInterfaceAccess() {
		return pServiceInterface;
	}
	
	public ParserRule getServiceInterfaceRule() {
		return getServiceInterfaceAccess().getRule();
	}
	
	//Message:
	//	'message' name=ID '(' (parameters+=Parameter ("," parameters+=Parameter)*)? ')'
	//	annotations+=PlatformAnnotation*;
	public MessageElements getMessageAccess() {
		return pMessage;
	}
	
	public ParserRule getMessageRule() {
		return getMessageAccess().getRule();
	}
	
	//Parameter:
	//	name=ID annotations+=PlatformAnnotation*;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//// SERVICE INSTANCE
	//Service:
	//	'service' name=ID ':' interfaces+=[ServiceInterface] (',' interfaces+=[ServiceInterface])*
	//	annotations+=PlatformAnnotation*;
	public ServiceElements getServiceAccess() {
		return pService;
	}
	
	public ParserRule getServiceRule() {
		return getServiceAccess().getRule();
	}
	
	//// TEST SEQUENCE
	//TestSequence:
	//	'test' name=ID annotations+=PlatformAnnotation* actions=Seq;
	public TestSequenceElements getTestSequenceAccess() {
		return pTestSequence;
	}
	
	public ParserRule getTestSequenceRule() {
		return getTestSequenceAccess().getRule();
	}
	
	//// ACTIONS
	//Action:
	//	Wait | Send | Expect | Par | Seq;
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	//Par:
	//	'par' name=ID? 'within' time=TimeInterval annotations+=PlatformAnnotation* '{' actions+=Action* '}';
	public ParElements getParAccess() {
		return pPar;
	}
	
	public ParserRule getParRule() {
		return getParAccess().getRule();
	}
	
	//Seq:
	//	'{' actions+=Action* '}';
	public SeqElements getSeqAccess() {
		return pSeq;
	}
	
	public ParserRule getSeqRule() {
		return getSeqAccess().getRule();
	}
	
	//Wait:
	//	'wait' time=TimeInterval;
	public WaitElements getWaitAccess() {
		return pWait;
	}
	
	public ParserRule getWaitRule() {
		return getWaitAccess().getRule();
	}
	
	//Send:
	//	'send' service=[Service] '!' message=[Message] '(' (parameters+=Expression ("," parameters+=Expression)*)? ')'
	//	annotations+=PlatformAnnotation*;
	public SendElements getSendAccess() {
		return pSend;
	}
	
	public ParserRule getSendRule() {
		return getSendAccess().getRule();
	}
	
	//Expect:
	//	'expect' service=[Service] '?' message=[Message] 'within' time=TimeInterval annotations+=PlatformAnnotation* ('assert'
	//	asserts+=Expression)*;
	public ExpectElements getExpectAccess() {
		return pExpect;
	}
	
	public ParserRule getExpectRule() {
		return getExpectAccess().getRule();
	}
	
	//// TIME INTERVALS
	//TimeInterval:
	//	'[' min=INT ':' max=INT ']';
	public TimeIntervalElements getTimeIntervalAccess() {
		return pTimeInterval;
	}
	
	public ParserRule getTimeIntervalRule() {
		return getTimeIntervalAccess().getRule();
	}
	
	//// EXPRESSIONS
	//Expression:
	//	ExternExpression | ByteLiteral | CharLiteral | IntegerLiteral | BooleanLiteral | StringLiteral | DoubleLiteral;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//ExternExpression:
	//	expression=EXTERN ('&' segments+=Expression)*;
	public ExternExpressionElements getExternExpressionAccess() {
		return pExternExpression;
	}
	
	public ParserRule getExternExpressionRule() {
		return getExternExpressionAccess().getRule();
	}
	
	//ByteLiteral:
	//	byteValue=BYTE;
	public ByteLiteralElements getByteLiteralAccess() {
		return pByteLiteral;
	}
	
	public ParserRule getByteLiteralRule() {
		return getByteLiteralAccess().getRule();
	}
	
	//CharLiteral:
	//	charValue=CHAR;
	public CharLiteralElements getCharLiteralAccess() {
		return pCharLiteral;
	}
	
	public ParserRule getCharLiteralRule() {
		return getCharLiteralAccess().getRule();
	}
	
	//IntegerLiteral:
	//	intValue=INT;
	public IntegerLiteralElements getIntegerLiteralAccess() {
		return pIntegerLiteral;
	}
	
	public ParserRule getIntegerLiteralRule() {
		return getIntegerLiteralAccess().getRule();
	}
	
	//BooleanLiteral:
	//	boolValue?='true' | {BooleanLiteral} 'false';
	public BooleanLiteralElements getBooleanLiteralAccess() {
		return pBooleanLiteral;
	}
	
	public ParserRule getBooleanLiteralRule() {
		return getBooleanLiteralAccess().getRule();
	}
	
	//StringLiteral:
	//	stringValue=STRING;
	public StringLiteralElements getStringLiteralAccess() {
		return pStringLiteral;
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}
	
	//DoubleLiteral:
	//	doubleValue=FLOAT;
	public DoubleLiteralElements getDoubleLiteralAccess() {
		return pDoubleLiteral;
	}
	
	public ParserRule getDoubleLiteralRule() {
		return getDoubleLiteralAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal BYTE returns ecore::EByte:
	//	"0x" ('0'..'9' | 'a'..'f' | 'A'..'F') ('0'..'9' | 'a'..'f' | 'A'..'F');
	public TerminalRule getBYTERule() {
		return tBYTE;
	}
	
	//terminal CHAR returns ecore::EByte:
	//	"'" ('\\0' | '\\t' | '\\n' | '\\r' | ' '..'&' | '\\\'' | '('..'[' | '\\\\' | ']'..'~') "'";
	public TerminalRule getCHARRule() {
		return tCHAR;
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return tINT;
	}
	
	//terminal FLOAT returns ecore::EDouble:
	//	'0'..'9'+ '.' '0'..'9'* (('e' | 'E') ('+' | '-')? '0'..'9'+)?
	//	| '.' '0'..'9'+ (('e' | 'E') ('+' | '-')? '0'..'9'+)?
	//	| '0'..'9'+ ('e' | 'E') ('+' | '-')? '0'..'9'+;
	public TerminalRule getFLOATRule() {
		return tFLOAT;
	}
	
	//terminal ANNOTATION_ID:
	//	"@" ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getANNOTATION_IDRule() {
		return tANNOTATION_ID;
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"';
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//terminal EXTERN:
	//	'`' ('\\' . | !('\\' | '`'))* '`';
	public TerminalRule getEXTERNRule() {
		return tEXTERN;
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return tWS;
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return tANY_OTHER;
	}
}
