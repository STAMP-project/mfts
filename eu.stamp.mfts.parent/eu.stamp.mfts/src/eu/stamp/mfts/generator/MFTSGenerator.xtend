/*
 * generated by Xtext 2.12.0
 */
package eu.stamp.mfts.generator

import eu.stamp.mfts.mFTS.Action
import eu.stamp.mfts.mFTS.Model
import eu.stamp.mfts.mFTS.Send
import eu.stamp.mfts.mFTS.Seq
import eu.stamp.mfts.mFTS.Service
import eu.stamp.mfts.mFTS.TestSequence
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.eclipse.emf.ecore.EObject
import eu.stamp.mfts.mFTS.Message
import eu.stamp.mfts.mFTS.Wait
import eu.stamp.mfts.mFTS.Par
import eu.stamp.mfts.mFTS.Expect

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MFTSGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		resource.allContents.filter(Model).forEach[ m, i | 
			val builder = new StringBuilder();
			generate(m, builder)
			fsa.generateFile('test' + i + '.plantuml', builder.toString)	
		]
	}
	
	private def void generate(Model m, StringBuilder builder) {
		builder.append("@startuml\n");
		m.tests.forEach[ t | 
			generate(t, builder)
		]
		builder.append("@enduml\n");
	}
	
	private def void generate(TestSequence t, StringBuilder builder) {
		builder.append("participant " + t.name + " #LightBlue\n")
		generate(t.actions, builder)
	}
	
	private def dispatch void generate(Action t, StringBuilder builder) {
		System.err.println("Action " + t.class.name + " is not implemented yet. Please contact Franck Fleurey!")
		//throw new UnsupportedOperationException("Action " + t.class.name + " is not implemented yet. Please contact Franck Fleurey!")
	}
	
	private def dispatch void generate(Seq s, StringBuilder builder) {
		s.actions.forEach[ a | 
			generate(a, builder)
		]
	}
	
	private def TestSequence findTestSequence(EObject o) {
		var EObject parent = o.eContainer
		while (!(parent instanceof TestSequence)) {
			parent = parent.eContainer
		}
		return parent as TestSequence
	}
	
	private def dispatch void generate(Wait w, StringBuilder builder) {
		builder.append("...Wait[" + w.time.min + "," + w.time.max + "]...\n")
	}
	
	private def dispatch void generate(Send s, StringBuilder builder) {
		val from = findTestSequence(s)
		builder.append("\n")
		builder.append(from.name)
		builder.append(" -> ")
		builder.append(s.service.name)
		builder.append(" : ")
		generate(s.message, builder)
		builder.append("\n");
	}
	
	private def dispatch void generate(Par p, StringBuilder builder) {
		builder.append("par ")
		builder.append(p.time.min + "," + p.time.max)
		builder.append("\n")
		p.actions.forEach[ a | 
			builder.append("else ")
			generate(a, builder)
		]
		builder.append("end\n")
	}
	
	private def dispatch void generate(Expect e, StringBuilder builder) {
		val to = findTestSequence(e)
		builder.append(e.time.min + "," + e.time.max + "\n")
		builder.append(e.service.name)
		builder.append(" -> ")
		builder.append(to.name)
		builder.append(" : ")
		generate(e.message, builder)
		builder.append("\n");
	}	
	
	private def void generate(Message m, StringBuilder builder) {
		builder.append(m.name)
		builder.append("(")
		builder.append(m.parameters.map[p | p.name].join(","))
		builder.append(")")
	}
}
